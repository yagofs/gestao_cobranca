name: SonarCloud analysis + Testes Funcionais

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  Analysis:
    runs-on: ubuntu-latest
    env:
      FRONTEND_URL: http://localhost:8080
      BACKEND_URL: http://127.0.0.1:5000

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Instalar dependências do frontend
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Servir frontend estático na porta 8080
        run: npx serve -s dist -l 8080 &

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Instalar dependências Python
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pytest pytest-cov

      - name: Start backend 
        run: |
          # Substitua pelo comando real que inicia seu backend no CI
          python -u src/server/app.py &

      - name: Aguarda frontend/backend responderem
        run: |
          timeout=90
          until curl -sSf "${FRONTEND_URL}/" >/dev/null || [ $timeout -le 0 ]; do sleep 1; timeout=$((timeout-1)); done
          if [ $timeout -le 0 ]; then echo "Frontend não respondeu"; exit 1; fi
          timeout=60
          until curl -sSf "${BACKEND_URL}/" >/dev/null || [ $timeout -le 0 ]; do sleep 1; timeout=$((timeout-1)); done
          if [ $timeout -le 0 ]; then echo "Backend não respondeu"; exit 1; fi

      - name: Rodar testes JS (jest) e gerar coverage
        run: npm test -- --coverage
      
      - name: Rodar testes funcionais Python (pytest) e gerar relatórios
        run: |
          mkdir -p reports coverage
          pytest tests/functional --junitxml=reports/junit.xml --cov=src --cov-report=xml:coverage/coverage.xml -q

      - name: Upload dos relatórios
        uses: actions/upload-artifact@v4
        with:
          name: functional-test-reports
          path: |
            reports/junit.xml
            coverage/coverage.xml
            coverage/lcov.info || true

      - name: Análise com SonarCloud
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=yagofs_gestao_cobranca
            -Dsonar.organization=yagofs
            -Dsonar.sources=src
            -Dsonar.tests=tests/functional
            -Dsonar.junit.reportPaths=reports/junit.xml
            -Dsonar.python.coverage.reportPaths=coverage/coverage.xml
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
          projectBaseDir: .